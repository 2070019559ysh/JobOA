@model JobOA.Model.MajorTask

@{
    ViewBag.Title = "AddMajorTask";
    Layout = "~/Views/Shared/AdminViewMaster.cshtml";
}

<div class="am-cf am-padding">
    <div class="am-fl am-cf"><strong class="am-text-primary am-text-lg">新增公司项目</strong> / <small>Add Project</small></div>
</div>

<div style="margin:10px;">
    <input type="hidden" id="mess" value="@ViewBag.mess" />
    @using (Html.BeginForm("AddMajorTask", "AdminTask", FormMethod.Post))
    {
        @Html.ValidationSummary(true)
        <div class="am-nbfc am-margin">
            @Html.LabelFor(model => model.Name, new {@class="am-fl" })
            @Html.TextBoxFor(m => m.Name, new { @class = "am-fl", placeholder = "输入主任务名" })
            <em class="am-text-danger">@Html.ValidationMessageFor(m => m.Name)</em>
        </div>
    <div class="am-margin">
        <label for="ArrangePersonId">安排人：</label>
        @{
        var departmentList = ViewBag.departmentList;
        ViewData["list"] = departmentList;
        }
        <div class="am-inline-block">@Html.Editor("department","ListBox")</div>
        @{
        var employeeList = ViewBag.employeeList;
        ViewData["list"] = employeeList;
        }
        <div class="am-inline-block">@Html.EditorFor(m => m.ArrangePersonId, "ListBox")</div>
        <em class="am-text-danger">@Html.ValidationMessageFor(m => m.ArrangePersonId)</em>
    </div>
    <div class="am-margin">
        <label for="ExePersonId">执行人：</label>
        @{
        ViewData["list"] = departmentList;
        }
        <div class="am-inline-block">@Html.Editor("department", "ListBox")</div>
        @{
        ViewData["list"] = employeeList;
        }
        <div class="am-inline-block">@Html.EditorFor(m => m.ExePersonId, "ListBox")</div>
        <em class="am-text-danger">@Html.ValidationMessageFor(m => m.ExePersonId)</em>
    </div>
    <div class="am-margin">
        <label for="CheckPersonId">检查（验收）人：</label>
        @{
        ViewData["list"] = departmentList;
        }
        <div class="am-inline-block">@Html.Editor("department", "ListBox")</div>
        @{
        ViewData["list"] = employeeList;
        }
        <div class="am-inline-block">@Html.EditorFor(m => m.CheckPersonId, "ListBox")</div>
        <em class="am-text-danger">@Html.ValidationMessageFor(m => m.CheckPersonId)</em>
    </div>
    <div class="am-margin">
        @{
        ViewData["list"] = departmentList;
        }
        <div class="am-inline-block">@Html.Editor("department", "ListBox")</div>
        @{
        ViewData["list"] = employeeList;
        }
        <div class="am-inline-block">@Html.EditorFor(m => m.Participator, "Selected")</div>
        <em class="am-text-danger">@Html.ValidationMessageFor(m => m.Participator)</em>
    </div>
        <div class="am-margin">
            @Html.LabelFor(m=>m.State)
            @{
        ViewData["list"] = ViewBag.state;
            }
            <div class="am-inline-block">@Html.EditorFor(m => m.State, "ListBox")</div>
            <em class="am-text-danger">@Html.ValidationMessageFor(m => m.State)</em>
        </div>
        <div class="am-nbfc am-margin">
            <label for="IsSecrecy" class="am-fl">是否对非参与人员保密：</label>
            @Html.CheckBoxFor(m => m.IsSecrecy, new { @class = "am-fl" })
            <em class="am-text-danger">@Html.ValidationMessageFor(m => m.IsSecrecy)</em>
        </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.StartTime)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.StartTime)
        @Html.ValidationMessageFor(model => model.StartTime)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.CompleteTime)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.CompleteTime)
        @Html.ValidationMessageFor(model => model.CompleteTime)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.CreateTime)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.CreateTime)
        @Html.ValidationMessageFor(model => model.CreateTime)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.CommitTime)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.CommitTime)
        @Html.ValidationMessageFor(model => model.CommitTime)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.State)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.State)
        @Html.ValidationMessageFor(model => model.State)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.IsNotice)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.IsNotice)
        @Html.ValidationMessageFor(model => model.IsNotice)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.IsSecrecy)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.IsSecrecy)
        @Html.ValidationMessageFor(model => model.IsSecrecy)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.Attachment)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.Attachment)
        @Html.ValidationMessageFor(model => model.Attachment)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.ProjectId)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.ProjectId)
        @Html.ValidationMessageFor(model => model.ProjectId)
    </div>
        <div class="am-form-group am-margin">
            <button type="submit" class="am-btn am-btn-secondary">创建项目</button>
            <button type="reset" class="am-btn am-btn-default">重置输入</button>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
